name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  ui-build:
    name: Build UI Assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache cargo for UI build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ui -> target

      - name: Install Trunk
        run: cargo install trunk --locked

      - name: Install wasm-opt
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen

      - name: Build UI assets
        working-directory: ui
        run: trunk build --release

      - name: Upload UI assets
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: ui/dist/
          retention-days: 1

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: ui-build
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install toolchain for native target (matrix) and add wasm target for Trunk
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }},wasm32-unknown-unknown

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Configure sccache
        run: echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      # macOS dependencies removed - using rustls, no OpenSSL needed

      - name: Download pre-built UI assets
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/dist/

      - name: Build release binaries with UI
        run: cargo build --release --target ${{ matrix.target }} --bins

      # Package artifacts
      - name: Package binaries (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release-files | Out-Null
          Copy-Item "target/${{ matrix.target }}/release/exposeme-server.exe" release-files/
          Copy-Item "target/${{ matrix.target }}/release/exposeme-client.exe" release-files/
          Compress-Archive -Path release-files/* -DestinationPath "exposeme-${{ matrix.name }}.zip"

      - name: Package binaries (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p release-files
          cp "target/${{ matrix.target }}/release/exposeme-server" release-files/
          cp "target/${{ matrix.target }}/release/exposeme-client" release-files/
          tar -czf "exposeme-${{ matrix.name }}.tar.gz" -C release-files .

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: exposeme-${{ matrix.name }}
          path: |
            exposeme-${{ matrix.name }}.tar.gz
            exposeme-${{ matrix.name }}.zip

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: ui-build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download pre-built UI assets
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/dist/

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: server
          tags: |
            ghcr.io/${{ github.repository }}-server:latest
            ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.version }}
          build-args: |
            UI_DIST_EXISTS=true
          cache-from: type=gha,scope=server-${{ github.run_id }}
          cache-to: type=gha,mode=max,scope=server-${{ github.run_id }}

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: client
          tags: |
            ghcr.io/${{ github.repository }}-client:latest
            ghcr.io/${{ github.repository }}-client:${{ steps.version.outputs.version }}
          build-args: |
            UI_DIST_EXISTS=true
          cache-from: type=gha,scope=client-${{ github.run_id }}
          cache-to: type=gha,mode=max,scope=client-${{ github.run_id }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-assets
          find artifacts/ -type f -name "exposeme-*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts/ -type f -name "exposeme-*.zip"    -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ExposeME ${{ steps.version.outputs.version }}
          body: |
            ## ExposeME ${{ steps.version.outputs.version }}

            ### Downloads (All include Web UI Dashboard)
            - Linux (x64): `exposeme-linux-x64.tar.gz`
            - Windows (x64): `exposeme-windows-x64.zip`
            - macOS (Apple Silicon): `exposeme-macos-arm64.tar.gz`
            - macOS (Intel): `exposeme-macos-x64.tar.gz`

            ### Docker Images
            ```bash
            # Server (with Web UI Dashboard)
            docker pull ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.version }}

            # Client
            docker pull ghcr.io/${{ github.repository }}-client:${{ steps.version.outputs.version }}
            ```

            ### Quick Start (Server)
            ```bash
            docker run -d -p 80:80 -p 443:443 \
              -e EXPOSEME_DOMAIN=yourdomain.com \
              ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.version }}
            ```
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
