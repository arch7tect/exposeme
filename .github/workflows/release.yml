name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build binaries for your target platforms
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
          # Optional: Intel Mac support
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          targets: wasm32-unknown-unknown

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl pkg-config

      - name: Install Trunk for UI building
        run: cargo install trunk --locked

      - name: Build UI assets
        run: |
          cd ui
          trunk build --release
          cd ..

      - name: Build release binaries with UI
        run: cargo build --release --target ${{ matrix.target }} --bins --features ui

      - name: Package binaries
        shell: bash
        run: |
          mkdir -p release-files
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows - create zip
            cp target/${{ matrix.target }}/release/exposeme-server.exe release-files/
            cp target/${{ matrix.target }}/release/exposeme-client.exe release-files/
            cd release-files
            7z a ../exposeme-${{ matrix.name }}.zip *
          else
            # Unix - create tar.gz
            cp target/${{ matrix.target }}/release/exposeme-server release-files/
            cp target/${{ matrix.target }}/release/exposeme-client release-files/
            cd release-files
            tar -czf ../exposeme-${{ matrix.name }}.tar.gz *
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: exposeme-${{ matrix.name }}
          path: exposeme-${{ matrix.name }}.*

  # Build and publish Docker images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install Rust and Trunk for UI build
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          rustup target add wasm32-unknown-unknown
          cargo install trunk --locked

      - name: Build UI assets
        run: |
          source ~/.cargo/env
          cd ui
          trunk build --release
          cd ..

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: server
          tags: |
            ghcr.io/${{ github.repository }}-server:latest
            ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.version }}
          build-args: |
            BUILD_UI=true
            UI_DIST_EXISTS=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: client
          tags: |
            ghcr.io/${{ github.repository }}-client:latest
            ghcr.io/${{ github.repository }}-client:${{ steps.version.outputs.version }}
          build-args: |
            BUILD_UI=false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-assets
          find artifacts/ -name "exposeme-*" -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ExposeME ${{ steps.version.outputs.version }}
          body: |
            ## ðŸš€ ExposeME ${{ steps.version.outputs.version }}
            
            ### Downloads (All include Web UI Dashboard! ðŸŽ¨)
            
            **Binaries:**
            - **Linux (x64):** `exposeme-linux-x64.tar.gz`
            - **Windows (x64):** `exposeme-windows-x64.zip`  
            - **macOS (Apple Silicon):** `exposeme-macos-arm64.tar.gz`
            - **macOS (Intel):** `exposeme-macos-x64.tar.gz`
            
            **Docker Images:**
            ```bash
            # Server (with Web UI Dashboard)
            docker pull ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.version }}
            
            # Client  
            docker pull ghcr.io/${{ github.repository }}-client:${{ steps.version.outputs.version }}
            ```
            
            ### Quick Start
            
            **Server:**
            ```bash
            docker run -d -p 80:80 -p 443:443 \
              -e EXPOSEME_DOMAIN=yourdomain.com \
              ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.version }}
            # Then visit https://yourdomain.com for the Web Dashboard! ðŸŽ¨
            ```
            
            **Client:**
            ```bash
            ./exposeme-client \
              --server-url wss://yourdomain.com/tunnel-ws \
              --token your-token \
              --tunnel-id my-app \
              --local-target http://localhost:3000
            ```
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}